#!/bin/bash
echo your_qt_path=${your_qt_path:='/usr/local/Trolltech/Qt-4.8.7'}
echo your_qwt_path=${your_qwt_path:='/usr/local/qwt-6.1.2'}
echo your_certificate=${your_certificate:='Developer ID Application: Association Mobsya (P97H86YL8K)'}

[ "$your_certificate" = "none" ] && function codesign() { true; } # if no certificate, codesign is a no-op

################################################
#create directory with correct architecture

cd $WORKSPACE/build/packager

#first, remove previous package
rm -f -rf dmg_contents
rm -f *.dmg

#create directory with the contents of the dmg: Aseba folder (which will be placed in the /Applications folder of the user), alias to applications, background picture, .DS_store file for dmg settings and appearance
mkdir dmg_contents
mkdir dmg_contents/Aseba
mkdir dmg_contents/.background
cd dmg_contents && ln -s /Applications Applications && cd ..
cp $WORKSPACE/source/packager/Resources/background.png dmg_contents/.background/
#cp $WORKSPACE/source/packager/Resources/Applications dmg_contents/
cp $WORKSPACE/source/packager/Resources/DS_Store dmg_contents/.DS_Store #not very convincing for the moment

#create adequate folders in the Aseba folder
#standard MacOS application bundles are folders with .app name, allowing to have icons libraries etc packaged with them
#structure is the following
# X.app
# - Contents
#	Info.plist (MacOS file specifying some settings e.g. compatibility version etc)
# 	- MacOS (here we place the exectable)
#	- Frameworks (here we place the frameworks and dynamic libraries)
#	- Resources (here we place icon files, qt.conf which tells the qt libraries where to find plugins...)
#	- Plugins (here we place plugins)
#
# to avoid repeating libraries in every app bundle, we place only symlinks in the frameworks folders and place all libraries in a separate library folder.
# command line executables are simply placed in a bin folder

cd dmg_contents/Aseba
mkdir libraries
mkdir bin
mkdir Simulations
mkdir Simulations/examples

for asebaapps in "Aseba Studio.app" "Thymio Firmware Upgrader.app" "Aseba Studio for Thymio.app" "Thymio VPL.app" "Wireless Thymio Network Configurator.app"
do
	mkdir -p "$asebaapps/Contents/"{MacOS,Plugins/{imageformats,sqldrivers,iconengines},Resources,Frameworks,translations}
	cp $WORKSPACE/source/packager/Resources/qt.conf "$asebaapps/Contents/Resources/"
done
cd Simulations
for asebaapps in "Aseba Playground.app" "Aseba Challenge.app"
do
	mkdir -p "$asebaapps/Contents/"{MacOS,Plugins/{imageformats,sqldrivers,iconengines},Resources,Frameworks,translations}
	cp $WORKSPACE/source/packager/Resources/qt.conf "$asebaapps/Contents/Resources/"
done
#copy resources into bundle folders
cp $WORKSPACE/source/aseba/targets/playground/examples/* examples
cp $WORKSPACE/source/aseba/menu/osx/asebachallenge.icns Aseba\ Challenge.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.challenge Aseba\ Challenge.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebaplayground.icns Aseba\ Playground.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.playground Aseba\ Playground.app/Contents/Info.plist
cd ..
cp $WORKSPACE/source/aseba/menu/osx/thymioupgrader.icns Thymio\ Firmware\ Upgrader.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.flasher Thymio\ Firmware\ Upgrader.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebastudio.icns Aseba\ Studio.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.studio Aseba\ Studio.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebastudiothymio.icns Aseba\ Studio\ for\ Thymio.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.asethym Aseba\ Studio\ for\ Thymio.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/thymiovpl.icns Thymio\ VPL.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.vpl Thymio\ VPL.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/thymiownetconfig.icns Wireless\ Thymio\ Network\ Configurator.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.netconfig Wireless\ Thymio\ Network\ Configurator.app/Contents/Info.plist
#cp $WORKSPACE/source/packager/Resources/background.png .background/

#copy all necessary libraries, plugins etc in the package and make them link to the right places (relative paths whithin the app bundle)
#otool -L will show where an executable of library links to, install_name_tool -change and -id can change the links and id
cd libraries

# first translations
mkdir -p translations
for lang in "fr" "de" "es" "ja"
do
	cp $your_qt_path/translations/qt_$lang.qm translations/
done
cp $WORKSPACE/source/packager/Resources/qt_it.qm translations/

# then Qt frameworks
for qtlib in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
do
	cp -R $your_qt_path/lib/$qtlib.framework . && chmod -Rf u+w $qtlib.framework
	rm -f $qtlib.framework/Versions/4/*_debug
	rm -f $qtlib.framework/Versions/Current/*_debug
	rm -f $qtlib.framework/*_debug
	rm -f $qtlib.framework/*_debug.prl

	install_name_tool -change $your_qt_path/lib/QtSql.framework/Versions/4/QtSql @executable_path/../Frameworks/QtSql.framework/Versions/4/QtSql $qtlib.framework/Versions/4/$qtlib
	install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui $qtlib.framework/Versions/4/$qtlib
	install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore $qtlib.framework/Versions/4/$qtlib 
	install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../Frameworks/QtXml.framework/Versions/4/QtXml $qtlib.framework/Versions/4/$qtlib 
	install_name_tool -change $your_qt_path/lib/QtNetwork.framework/Versions/4/QtNetwork @executable_path/../Frameworks/QtNetwork.framework/Versions/4/QtNetwork $qtlib.framework/Versions/4/$qtlib 
	install_name_tool -change $your_qt_path/lib/QtOpenGL.framework/Versions/4/QtOpenGL @executable_path/../Frameworks/QtOpenGL.framework/Versions/4/QtOpenGL $qtlib.framework/Versions/4/$qtlib 
	install_name_tool -change $your_qt_path/lib/libz.1.2.3.dylib @executable_path/../Frameworks/libz.1.2.3.dylib $qtlib.framework/Versions/4/$qtlib
	install_name_tool -change $your_qt_path/lib/libQtCLucene.4.dylib @executable_path/../Frameworks/libQtCLucene.4.8.7.dylib $qtlib.framework/Versions/4/$qtlib
	install_name_tool -id  @executable_path/../Frameworks/$qtlib.framework/Versions/4/$qtlib $qtlib.framework/Versions/4/$qtlib
	otool -L $qtlib.framework/Versions/4/$qtlib 
	
	codesign --force --verify --verbose --sign "$your_certificate" $qtlib.framework/Versions/4/$qtlib
done

# Qwt framework
cp  -R $your_qwt_path/lib/qwt.framework . && chmod -Rf u+w qwt.framework
install_name_tool -id  @executable_path/../Frameworks/qwt.framework/Versions/6/qwt qwt.framework/Versions/6/qwt
install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui qwt.framework/Versions/6/qwt
install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore qwt.framework/Versions/6/qwt
install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/4/QtSvg qwt.framework/Versions/6/qwt
install_name_tool -change $your_qt_path/lib/QtOpenGL.framework/Versions/4/QtOpenGL @executable_path/../Frameworks/QtOpenGL.framework/Versions/4/QtOpenGL qwt.framework/Versions/6/qwt
otool -L qwt.framework/Versions/6/qwt
codesign --force --verify --verbose --sign "$your_certificate" qwt.framework/Versions/6/qwt

# Dashel
cp $WORKSPACE/build/dashel/libdashel.1.2.0.dylib . && chmod -Rf u+w libdashel.1.2.0.dylib
install_name_tool -id  @executable_path/../Frameworks/libdashel.1.2.0.dylib libdashel.1.2.0.dylib
otool -L libdashel.1.2.0.dylib
codesign --force --verify --verbose --sign "$your_certificate" libdashel.1.2.0.dylib

# Qt plugins
cp $your_qt_path/lib/libQtCLucene.4.8.7.dylib . && chmod -Rf u+w libQtCLucene.4.8.7.dylib
install_name_tool -id @executable_path/../Frameworks/libQtCLucene.4.8.7.dylib libQtCLucene.4.8.7.dylib
install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore libQtCLucene.4.8.7.dylib
otool -L libQtCLucene.4.8.7.dylib
codesign --force --verify --verbose --sign "$your_certificate" libQtCLucene.4.8.7.dylib

cp $your_qt_path/plugins/sqldrivers/libqsqlite.dylib . && chmod -Rf u+w libqsqlite.dylib
install_name_tool -id @executable_path/../Plugins/sqldrivers/libraries/libqsqlite.dylib libqsqlite.dylib 
install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore libqsqlite.dylib
install_name_tool -change $your_qt_path/lib/QtSql.framework/Versions/4/QtSql @executable_path/../Frameworks/QtSql.framework/Versions/4/QtSql libqsqlite.dylib
otool -L libqsqlite.dylib
codesign --force --verify --verbose --sign "$your_certificate" libqsqlite.dylib

for formatplugin in "libqgif" "libqico" "libqjpeg" "libqmng" "libqsvg" "libqtga" "libqtiff"
do
	cp $your_qt_path/plugins/imageformats/$formatplugin.dylib . && chmod -Rf u+w $formatplugin.dylib
	install_name_tool -id @executable_path/../Plugins/imageformats/$formatplugin.dylib $formatplugin.dylib 
	install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore $formatplugin.dylib
	install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui $formatplugin.dylib
	install_name_tool -change $your_qt_path/lib/QtSql.framework/Versions/4/QtSql @executable_path/../Frameworks/QtSql.framework/Versions/4/QtSql $formatplugin.dylib
	install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../Frameworks/QtXml.framework/Versions/4/QtXml $formatplugin.dylib
	install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/4/QtSvg $formatplugin.dylib
	otool -L $formatplugin.dylib
	codesign --force --verify --verbose --sign "$your_certificate" $formatplugin.dylib
done


cp $your_qt_path/plugins/iconengines/libqsvgicon.dylib . && chmod -Rf u+w libqsvgicon.dylib
install_name_tool -id @executable_path/../Plugins/iconengines/libqsvgicon.dylib libqsvgicon.dylib 
install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore libqsvgicon.dylib
install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui libqsvgicon.dylib
install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../Frameworks/QtXml.framework/Versions/4/QtXml libqsvgicon.dylib
install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/4/QtSvg libqsvgicon.dylib
otool -L libqsvgicon.dylib
codesign --force --verify --verbose --sign "$your_certificate" libqsvgicon.dylib

cd ..


#copy all executables 

cp $WORKSPACE/build/aseba/clients/cmd/asebacmd .
cp $WORKSPACE/build/aseba/clients/dump/asebadump .
cp $WORKSPACE/build/aseba/clients/replay/asebaplay .
cp $WORKSPACE/build/aseba/clients/replay/asebarec .
cp $WORKSPACE/build/aseba/clients/massloader/asebamassloader .
cp $WORKSPACE/build/aseba/switches/switch/asebaswitch .
cp $WORKSPACE/build/aseba/switches/http/asebahttp .
cp $WORKSPACE/build/aseba/switches/http2/asebahttp2 .
cp $WORKSPACE/build/aseba/targets/dummy/asebadummynode .
cp $WORKSPACE/build/aseba/clients/studio/asebastudio .
cp $WORKSPACE/build/aseba/clients/studio/thymiovpl .
cp $WORKSPACE/build/aseba/targets/challenge/asebachallenge Simulations/
cp $WORKSPACE/build/aseba/targets/playground/asebaplayground Simulations/
cp $WORKSPACE/build/aseba/clients/thymioupgrader/thymioupgrader .
cp $WORKSPACE/build/aseba/clients/thymiownetconfig/thymiownetconfig .
chmod -Rf 0755 .

#make them link to the correct libraries
for asebaexec in "asebastudio" "thymioupgrader" "thymiovpl" "thymiownetconfig"
do
	chmod 0755 $asebaexec
	install_name_tool -change $your_qt_path/lib/QtHelp.framework/Versions/4/QtHelp @executable_path/../Frameworks/QtHelp.framework/Versions/4/QtHelp $asebaexec
	install_name_tool -change $your_qt_path/lib/QtSql.framework/Versions/4/QtSql @executable_path/../Frameworks/QtSql.framework/Versions/4/QtSql $asebaexec
	install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui $asebaexec
	install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../Frameworks/QtXml.framework/Versions/4/QtXml $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtNetwork.framework/Versions/4/QtNetwork @executable_path/../Frameworks/QtNetwork.framework/Versions/4/QtNetwork $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtOpenGL.framework/Versions/4/QtOpenGL @executable_path/../Frameworks/QtOpenGL.framework/Versions/4/QtOpenGL $asebaexec
	install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/4/QtSvg $asebaexec
	install_name_tool -change $your_qt_path/lib/QtWebKit.framework/Versions/4/QtWebKit @executable_path/../Frameworks/QtWebKit.framework/Versions/4/QtWebKit $asebaexec
	install_name_tool -change qwt.framework/Versions/6/qwt @executable_path/../Frameworks/qwt.framework/Versions/6/qwt $asebaexec
	install_name_tool -change @rpath/libdashel.1.dylib @executable_path/../Frameworks/libdashel.1.2.0.dylib $asebaexec
	otool -L $asebaexec
	codesign --force --verify --verbose --sign "$your_certificate" $asebaexec
done


#now that all is correctly linked, place executables into app bundles
mv asebastudio Aseba\ Studio.app/Contents/MacOS/
mv thymioupgrader Thymio\ Firmware\ Upgrader.app/Contents/MacOS/
mv thymiownetconfig Wireless\ Thymio\ Network\ Configurator.app/Contents/MacOS/ 
cp $WORKSPACE/source/packager/Resources/asethym Aseba\ Studio\ for\ Thymio.app/contents/MacOS/ #simple executable bash script starting Studio with Thymio II as target
mv thymiovpl Thymio\ VPL.app/Contents/MacOS/
cp $WORKSPACE/source/packager/Resources/launchthymiovpl Thymio\ VPL.app/contents/MacOS/ #simple executable bash script starting VPL with Thymio II as target


#create symlinks to the libraries from inside the app bundles
for asebaapps in "Aseba Studio.app" "Thymio Firmware Upgrader.app" "Aseba Studio for Thymio.app" "Thymio VPL.app" "Wireless Thymio Network Configurator.app"
do
	cd "$asebaapps/Contents/Frameworks/"
	for qtframework in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
	do
		hln ../../../libraries/$qtframework.framework $qtframework.framework
	done

	hln ../../../libraries/qwt.framework qwt.framework
	hln ../../../libraries/libdashel.1.2.0.dylib libdashel.1.2.0.dylib
	hln ../../../libraries/libQtCLucene.4.8.7.dylib libQtCLucene.4.8.7.dylib
	
	cd ../translations
	for lang in "fr" "de" "it" "es" "ja"
	do
		hln ../../../libraries/translations/qt_$lang.qm qt_$lang.qm
	done

	cd ../Plugins/imageformats
	for qtplugin in "libqgif.dylib" "libqico.dylib" "libqjpeg.dylib" "libqmng.dylib" "libqsvg.dylib" "libqtga.dylib" "libqtiff.dylib"
	do
		hln ../../../../libraries/$qtplugin $qtplugin
	done

	cd ../iconengines
	hln ../../../../libraries/libqsvgicon.dylib libqsvgicon.dylib

	cd ../sqldrivers
	hln ../../../../libraries/libqsqlite.dylib libqsqlite.dylib
	cd ../../../..
	
	codesign --force --verify --verbose --sign "$your_certificate" "$asebaapps"
done

cd Simulations
#make them link to the correct libraries
for asebaexec in "asebachallenge" "asebaplayground"
do
	chmod 0755 $asebaexec
	install_name_tool -change $your_qt_path/lib/QtHelp.framework/Versions/4/QtHelp @executable_path/../Frameworks/QtHelp.framework/Versions/4/QtHelp $asebaexec
	install_name_tool -change $your_qt_path/lib/QtSql.framework/Versions/4/QtSql @executable_path/../Frameworks/QtSql.framework/Versions/4/QtSql $asebaexec
	install_name_tool -change $your_qt_path/lib/QtGui.framework/Versions/4/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/4/QtGui $asebaexec
	install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/4/QtCore $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../Frameworks/QtXml.framework/Versions/4/QtXml $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtNetwork.framework/Versions/4/QtNetwork @executable_path/../Frameworks/QtNetwork.framework/Versions/4/QtNetwork $asebaexec 
	install_name_tool -change $your_qt_path/lib/QtOpenGL.framework/Versions/4/QtOpenGL @executable_path/../Frameworks/QtOpenGL.framework/Versions/4/QtOpenGL $asebaexec
	install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/4/QtSvg $asebaexec
	install_name_tool -change $your_qt_path/lib/QtWebKit.framework/Versions/4/QtWebKit @executable_path/../Frameworks/QtWebKit.framework/Versions/4/QtWebKit $asebaexec
	install_name_tool -change qwt.framework/Versions/6/qwt @executable_path/../Frameworks/qwt.framework/Versions/6/qwt $asebaexec
	install_name_tool -change @rpath/libdashel.1.dylib @executable_path/../Frameworks/libdashel.1.2.0.dylib $asebaexec
	otool -L $asebaexec
	codesign --force --verify --verbose --sign "$your_certificate" $asebaexec
done
mv asebachallenge Aseba\ Challenge.app/Contents/MacOS/
mv asebaplayground Aseba\ Playground.app/Contents/MacOS/
#create symlinks to the libraries from inside the app bundles
for asebaapps in "Aseba Playground.app" "Aseba Challenge.app" 
do
	cd "$asebaapps/Contents/Frameworks/"
	for qtframework in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
	do
		hln ../../../../libraries/$qtframework.framework $qtframework.framework
	done

	hln ../../../../libraries/qwt.framework qwt.framework
	hln ../../../../libraries/libdashel.1.2.0.dylib libdashel.1.2.0.dylib
	hln ../../../../libraries/libQtCLucene.4.8.7.dylib libQtCLucene.4.8.7.dylib
	
	cd ../translations
	for lang in "fr" "de" "it" "es" "ja"
	do
		hln ../../../../libraries/translations/qt_$lang.qm qt_$lang.qm
	done

	cd ../Plugins/imageformats
	for qtplugin in "libqgif.dylib" "libqico.dylib" "libqjpeg.dylib" "libqmng.dylib" "libqsvg.dylib" "libqtga.dylib" "libqtiff.dylib"
	do
		hln ../../../../../libraries/$qtplugin $qtplugin
	done

	cd ../iconengines
	hln ../../../../../libraries/libqsvgicon.dylib libqsvgicon.dylib

	cd ../sqldrivers
	hln ../../../../../libraries/libqsqlite.dylib libqsqlite.dylib
	cd ../../../.. 
	
	cd "$asebaapps/Contents/MacOS/"
	hln ../../../../bin/asebaswitch asebaswitch
	cd ../../..
	
	codesign --force --verify --verbose --sign "$your_certificate" "$asebaapps"
done
cd ..
#change links of executables that are not in an app bundle = those that will be used rather in command line and do not need a nice icon
# FIXME: what is up with asebamassloader? command line or nice app bundle with GUI?
for asebaexec in "asebaswitch" "asebarec" "asebacmd" "asebadump" "asebaplay" "asebadummynode" "asebahttp" "asebahttp2" "asebamassloader"
do
	install_name_tool -change @rpath/libdashel.1.dylib @executable_path/../libraries/libdashel.1.2.0.dylib $asebaexec
	install_name_tool -change $your_qt_path/lib/QtCore.framework/Versions/4/QtCore @executable_path/../libraries/QtCore.framework/Versions/4/QtCore $asebaexec
	install_name_tool -change $your_qt_path/lib/QtXml.framework/Versions/4/QtXml @executable_path/../libraries/QtXml.framework/Versions/4/QtXml $asebaexec
	install_name_tool -change $your_qt_path/lib/QtSvg.framework/Versions/4/QtSvg @executable_path/../libraries/QtSvg.framework/Versions/4/QtSvg $asebaexec
	install_name_tool -change $your_qt_path/lib/QtHelp.framework/Versions/4/QtHelp @executable_path/../libraries/QtHelp.framework/Versions/4/QtHelp $asebaexec
	install_name_tool -change $your_qt_path/lib/QtWebKit.framework/Versions/4/QtWebKit @executable_path/../libraries/QtWebKit.framework/Versions/4/QtWebKit $asebaexec
	install_name_tool -change $your_qt_path/lib/QtNetwork.framework/Versions/4/QtNetwork @executable_path/../libraries/QtNetwork.framework/Versions/4/QtNetwork $asebaexec

	otool -L $asebaexec
	codesign --force --verify --verbose --sign "$your_certificate" $asebaexec
done


#place executables into bin/
mv asebacmd bin/
mv asebadump bin/
mv asebaplay bin/
mv asebarec bin/
mv asebaswitch bin/
mv asebadummynode bin/
mv asebahttp bin/
mv asebahttp2 bin/
mv asebamassloader bin/

# Scratch2-ThymioII
which -s platypus &&
if [ -f "$WORKSPACE"/packager/inirobot-osx/Makefile ]; then
    make -C "$WORKSPACE"/packager/inirobot-osx bundle archive \
        PORTLIST="$WORKSPACE"/build/dashel/portlist \
        ASEBAHTTP="$WORKSPACE"/build/aseba/switches/http/asebahttp \
        ASEBASCRATCH="$WORKSPACE"/build/aseba/examples/clients/scratch/asebascratch
    mv "$WORKSPACE"/packager/inirobot-osx/Scratch "$WORKSPACE/build/packager/dmg_contents/Aseba/Scratch"
    mv "$WORKSPACE"/packager/inirobot-osx/Scratch.dmg "$WORKSPACE/build/packager/ThymioScratch-"$BUILD_ID.dmg
fi

# time to create a dmg
cd ../..

#create temporary dmg with contents of dmg_contents folder
hdiutil create -srcfolder dmg_contents -volname "Aseba" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size $200000k temp.dmg
#mount it
hdiutil attach temp.dmg
#change permissions
chmod -Rf go-w /Volumes/Aseba
sync
sync
#unmount
hdiutil detach /Volumes/Aseba
#make it into compressed dmg
hdiutil convert temp.dmg  -format UDZO -imagekey zlib-level=9 -o Aseba-$BUILD_ID.dmg
#sign the dmg
codesign --force --verify --verbose --sign "$your_certificate" Aseba-$BUILD_ID.dmg
rm -f temp.dmg
exit 0
