#!/bin/bash
echo QT_LIBRARY_DIR=${QT_LIBRARY_DIR:='/usr/local/Trolltech/Qt-4.8.7/lib'}
echo QWT_LIBRARIES=${QWT_LIBRARIES:='/usr/local/qwt-6.1.2/lib/qwt.framework'}
echo CODESIGN_CERT=${CODESIGN_CERT:='Developer ID Application: Association Mobsya (P97H86YL8K)'}

QT_ROOT=${QT_LIBRARY_DIR%/lib}
QT_VERSION=${QT_ROOT##*/}
QT_VERSION=${QT_VERSION##*-}
echo QT_TRANSLATIONS_DIR=${QT_TRANSLATIONS_DIR:=${QT_ROOT}/translations}
echo QT_PLUGINS_DIR=${QT_PLUGINS_DIR:=${QT_ROOT}/plugins}

echo BUILD_ID=${BUILD_ID:=$(date -u +"%Y%m%dT%H%M%SZ")}

################################################
#create directory with correct architecture

cd $WORKSPACE/build/packager

#first, remove previous package
rm -rf dmg_contents
rm -f *.dmg

#create directory with the contents of the dmg: Aseba folder (which will be placed in the /Applications folder of the user), alias to applications, background picture, .DS_store file for dmg settings and appearance
mkdir dmg_contents
mkdir dmg_contents/Aseba
mkdir dmg_contents/.background
cd dmg_contents && ln -s /Applications Applications && cd ..
cp $WORKSPACE/source/packager/Resources/background.png dmg_contents/.background/
#cp $WORKSPACE/source/packager/Resources/Applications dmg_contents/
cp $WORKSPACE/source/packager/Resources/DS_Store dmg_contents/.DS_Store #not very convincing for the moment

# Rename library dependencies in each of the given resources
# Any renaming that doesn't apply will just be ignored by install_name_tool
# /usr/local/lib is a failsafe, in case Homebrew's symbolic links were used
rename_deps_and_sign () {
    for resource in "$@"
    do
	for name in QtCore QtGui QtHelp QtNetwork QtOpenGL QtSql QtSvg QtWebKit QtXml
	do
	    install_name_tool -change $QT_LIBRARY_DIR/$name.framework/Versions/4/$name \
			      @executable_path/../Frameworks/$name.framework/Versions/4/$name \
			      -change /usr/local/lib/$name.framework/Versions/4/$name \
			      @executable_path/../Frameworks/$name.framework/Versions/4/$name \
			      $resource
	done
	for name in $QT_LIBRARY_DIR/{libz.1.2.3,libQtCLucene.4}.dylib $WORKSPACE/build/dashel/libdashel.1.dylib
	do
	    install_name_tool -change $name @executable_path/../Frameworks/${name##*/} $resource
	done
	for name in {,/usr/local/lib/}qwt.framework/Versions/6/qwt 
	do
    	    install_name_tool -change $name @executable_path/../Frameworks/qwt.framework/Versions/6/qwt $resource
	done
	otool -L $resource
	[ "${CODESIGN_CERT:0:25}" = "Developer ID Application:" ] &&
	    codesign --force --verify --verbose --sign "$CODESIGN_CERT" $resource
    done
}

#create adequate folders in the Aseba folder
#standard MacOS application bundles are folders with .app name, allowing to have icons libraries etc packaged with them
#structure is the following
# X.app
# - Contents
#	Info.plist (MacOS file specifying some settings e.g. compatibility version etc)
# 	- MacOS (here we place the exectable)
#	- Frameworks (here we place the frameworks and dynamic libraries)
#	- Resources (here we place icon files, qt.conf which tells the qt libraries where to find plugins...)
#	- Plugins (here we place plugins)
#
# to avoid repeating libraries in every app bundle, we place only symlinks in the frameworks folders and place all libraries in a separate library folder.
# command line executables are simply placed in a bin folder

cd dmg_contents/Aseba
mkdir libraries
mkdir bin
mkdir Simulations

for asebaapps in "Aseba Studio.app" "Thymio Firmware Upgrader.app" "Aseba Studio for Thymio.app" "Thymio VPL.app" "Wireless Thymio Network Configurator.app"
do
	mkdir -p "$asebaapps/Contents/"{MacOS,Plugins/{imageformats,sqldrivers,iconengines},Resources,Frameworks,translations}
	cp $WORKSPACE/source/packager/Resources/qt.conf "$asebaapps/Contents/Resources/"
done
cd Simulations
for asebaapps in "Aseba Playground.app" "Aseba Challenge.app"
do
	mkdir -p "$asebaapps/Contents/"{MacOS,Plugins/{imageformats,sqldrivers,iconengines},Resources,Frameworks,translations}
	cp $WORKSPACE/source/packager/Resources/qt.conf "$asebaapps/Contents/Resources/"
done
#copy resources into bundle folders
cp -r $WORKSPACE/source/aseba/targets/playground/examples .
cp $WORKSPACE/source/aseba/menu/osx/asebachallenge.icns Aseba\ Challenge.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.challenge Aseba\ Challenge.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebaplayground.icns Aseba\ Playground.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.playground Aseba\ Playground.app/Contents/Info.plist
cd ..
cp $WORKSPACE/source/aseba/menu/osx/thymioupgrader.icns Thymio\ Firmware\ Upgrader.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.flasher Thymio\ Firmware\ Upgrader.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebastudio.icns Aseba\ Studio.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.studio Aseba\ Studio.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/asebastudiothymio.icns Aseba\ Studio\ for\ Thymio.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.asethym Aseba\ Studio\ for\ Thymio.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/thymiovpl.icns Thymio\ VPL.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.vpl Thymio\ VPL.app/Contents/Info.plist
cp $WORKSPACE/source/aseba/menu/osx/thymiownetconfig.icns Wireless\ Thymio\ Network\ Configurator.app/Contents/Resources
cp $WORKSPACE/source/packager/Resources/Info.plist.netconfig Wireless\ Thymio\ Network\ Configurator.app/Contents/Info.plist
#cp $WORKSPACE/source/packager/Resources/background.png .background/

#copy all necessary libraries, plugins etc in the package and make them link to the right places (relative paths whithin the app bundle)
#otool -L will show where an executable of library links to, install_name_tool -change and -id can change the links and id
cd libraries

# first translations
mkdir -p translations
for lang in "fr" "de" "es" "ja"
do
	cp $QT_TRANSLATIONS_DIR/qt_$lang.qm translations/
done
cp $WORKSPACE/source/packager/Resources/qt_it.qm translations/

# then Qt frameworks
for qtlib in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
do
	cp -R $QT_LIBRARY_DIR/$qtlib.framework .
	chmod -Rf u+w $qtlib.framework
	rm -f $qtlib.framework/Versions/4/*_debug
	rm -f $qtlib.framework/Versions/Current/*_debug
	rm -f $qtlib.framework/*_debug
	rm -f $qtlib.framework/*_debug.prl

	install_name_tool -id  @executable_path/../Frameworks/$qtlib.framework/Versions/4/$qtlib $qtlib.framework/Versions/4/$qtlib
	rename_deps_and_sign $qtlib.framework/Versions/4/$qtlib
done

# Qwt framework
cp  -R $QWT_LIBRARIES .
chmod -Rf u+w qwt.framework
install_name_tool -id  @executable_path/../Frameworks/qwt.framework/Versions/6/qwt qwt.framework/Versions/6/qwt
rename_deps_and_sign qwt.framework/Versions/6/qwt

# Dashel
cp $WORKSPACE/build/dashel/libdashel.1.1.0.dylib .
install_name_tool -id  @executable_path/../Frameworks/libdashel.1.1.0.dylib libdashel.1.1.0.dylib
rename_deps_and_sign libdashel.1.1.0.dylib

# Qt plugins
cp $QT_LIBRARY_DIR/libQtCLucene.${QT_VERSION}.dylib . && chmod +w libQtCLucene.${QT_VERSION}.dylib
install_name_tool -id @executable_path/../Frameworks/libQtCLucene.${QT_VERSION}.dylib libQtCLucene.${QT_VERSION}.dylib
rename_deps_and_sign libQtCLucene.${QT_VERSION}.dylib

cp $QT_PLUGINS_DIR/sqldrivers/libqsqlite.dylib .
install_name_tool -id @executable_path/../Plugins/sqldrivers/libraries/libqsqlite.dylib libqsqlite.dylib
rename_deps_and_sign libqsqlite.dylib

for formatplugin in "libqgif" "libqico" "libqjpeg" "libqmng" "libqsvg" "libqtga" "libqtiff"
do
	cp $QT_PLUGINS_DIR/imageformats/$formatplugin.dylib .
	install_name_tool -id @executable_path/../Plugins/imageformats/$formatplugin.dylib $formatplugin.dylib 
	rename_deps_and_sign $formatplugin.dylib
done


cp $QT_PLUGINS_DIR/iconengines/libqsvgicon.dylib .
install_name_tool -id @executable_path/../Plugins/iconengines/libqsvgicon.dylib libqsvgicon.dylib 
rename_deps_and_sign libqsvgicon.dylib

cd ..


#copy all executables 

cp $WORKSPACE/build/aseba/clients/cmd/asebacmd .
cp $WORKSPACE/build/aseba/clients/dump/asebadump .
cp $WORKSPACE/build/aseba/clients/replay/asebaplay .
cp $WORKSPACE/build/aseba/clients/replay/asebarec .
cp $WORKSPACE/build/aseba/clients/massloader/asebamassloader .
cp $WORKSPACE/build/aseba/switches/switch/asebaswitch .
cp $WORKSPACE/build/aseba/switches/http/asebahttp .
cp $WORKSPACE/build/aseba/switches/http2/asebahttp2 .
cp $WORKSPACE/build/aseba/targets/dummy/asebadummynode .
cp $WORKSPACE/build/aseba/clients/studio/asebastudio .
cp $WORKSPACE/build/aseba/clients/studio/thymiovpl .
cp $WORKSPACE/build/aseba/targets/challenge/asebachallenge Simulations/
cp $WORKSPACE/build/aseba/targets/playground/asebaplayground Simulations/
cp $WORKSPACE/build/aseba/clients/thymioupgrader/thymioupgrader .
cp $WORKSPACE/build/aseba/clients/thymiownetconfig/thymiownetconfig .

#make them link to the correct libraries
rename_deps_and_sign "asebastudio" "thymioupgrader" "thymiovpl" "thymiownetconfig"


#now that all is correctly linked, place executables into app bundles
mv asebastudio Aseba\ Studio.app/Contents/MacOS/
mv thymioupgrader Thymio\ Firmware\ Upgrader.app/Contents/MacOS/
mv thymiownetconfig Wireless\ Thymio\ Network\ Configurator.app/Contents/MacOS/ 
cp $WORKSPACE/source/packager/Resources/asethym Aseba\ Studio\ for\ Thymio.app/contents/MacOS/ #simple executable bash script starting Studio with Thymio II as target
mv thymiovpl Thymio\ VPL.app/Contents/MacOS/
cp $WORKSPACE/source/packager/Resources/launchthymiovpl Thymio\ VPL.app/contents/MacOS/ #simple executable bash script starting VPL with Thymio II as target


#create symlinks to the libraries from inside the app bundles
for asebaapps in "Aseba Studio.app" "Thymio Firmware Upgrader.app" "Aseba Studio for Thymio.app" "Thymio VPL.app" "Wireless Thymio Network Configurator.app"
do
	cd "$asebaapps/Contents/Frameworks/"
	for qtframework in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
	do
		ln -s ../../../libraries/$qtframework.framework
	done

	ln -s ../../../libraries/qwt.framework
	ln -s ../../../libraries/libdashel.1.1.0.dylib
	ln -s ../../../libraries/libQtCLucene.${QT_VERSION}.dylib
	
	cd ../translations
	for lang in "fr" "de" "it" "es" "ja"
	do
		ln -s ../../../libraries/translations/qt_$lang.qm
	done

	cd ../Plugins/imageformats
	for qtplugin in "libqgif.dylib" "libqico.dylib" "libqjpeg.dylib" "libqmng.dylib" "libqsvg.dylib" "libqtga.dylib" "libqtiff.dylib"
	do
		ln -s ../../../../libraries/$qtplugin .
	done

	cd ../iconengines
	ln -s ../../../../libraries/libqsvgicon.dylib .

	cd ../sqldrivers
	ln -s ../../../../libraries/libqsqlite.dylib .
	cd ../../../..
	
	[ "${CODESIGN_CERT:0:25}" = "Developer ID Application:" ] &&
		codesign --force --verify --verbose --sign "$CODESIGN_CERT" "$asebaapps"
done

cd Simulations
#make them link to the correct libraries
rename_deps_and_sign "asebachallenge" "asebaplayground"
mv asebachallenge Aseba\ Challenge.app/Contents/MacOS/
mv asebaplayground Aseba\ Playground.app/Contents/MacOS/
#create symlinks to the libraries from inside the app bundles
for asebaapps in "Aseba Playground.app" "Aseba Challenge.app" 
do
	cd "$asebaapps/Contents/Frameworks/"
	for qtframework in "QtGui" "QtCore" "QtOpenGL" "QtXml" "QtNetwork" "QtHelp" "QtSql" "QtSvg" "QtWebKit"
	do
		ln -s ../../../../libraries/$qtframework.framework
	done

	ln -s ../../../../libraries/qwt.framework
	ln -s ../../../../libraries/libdashel.1.1.0.dylib
	ln -s ../../../../libraries/libQtCLucene.${QT_VERSION}.dylib
	
	cd ../translations
	for lang in "fr" "de" "it" "es" "ja"
	do
		ln -s ../../../../libraries/translations/qt_$lang.qm
	done

	cd ../Plugins/imageformats
	for qtplugin in "libqgif.dylib" "libqico.dylib" "libqjpeg.dylib" "libqmng.dylib" "libqsvg.dylib" "libqtga.dylib" "libqtiff.dylib"
	do
		ln -s ../../../../../libraries/$qtplugin .
	done

	cd ../iconengines
	ln -s ../../../../../libraries/libqsvgicon.dylib .

	cd ../sqldrivers
	ln -s ../../../../../libraries/libqsqlite.dylib .
	cd ../../../.. 
	
	cd "$asebaapps/Contents/MacOS/"
	ln -s ../../../../bin/asebaswitch asebaswitch
	cd ../../..
	
	[ "${CODESIGN_CERT:0:25}" = "Developer ID Application:" ] &&
		codesign --force --verify --verbose --sign "$CODESIGN_CERT" "$asebaapps"
done
cd ..
#change links of executables that are not in an app bundle = those that will be used rather in command line and do not need a nice icon
# FIXME: what is up with asebamassloader? command line or nice app bundle with GUI?
rename_deps_and_sign "asebaswitch" "asebarec" "asebacmd" "asebadump" "asebaplay" "asebadummynode" "asebahttp" "asebahttp2" "asebamassloader"


#place executables into bin/
mv asebacmd bin/
mv asebadump bin/
mv asebaplay bin/
mv asebarec bin/
mv asebaswitch bin/
mv asebadummynode bin/
mv asebahttp bin/
mv asebahttp2 bin/
mv asebamassloader bin/

# time to create a dmg
cd ../..

#create temporary dmg with contents of dmg_contents folder
hdiutil create -srcfolder dmg_contents -volname "Aseba" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size 200000k temp.dmg
#mount it
hdiutil attach temp.dmg
#change permissions
chmod -Rf go-w /Volumes/Aseba
sync
sync
#unmount
hdiutil detach /Volumes/Aseba
#make it into compressed dmg
hdiutil convert temp.dmg  -format UDZO -imagekey zlib-level=9 -o Aseba-$BUILD_ID.dmg
#sign the dmg
[ "${CODESIGN_CERT:0:25}" = "Developer ID Application:" ] &&
	codesign --force --verify --verbose --sign "$CODESIGN_CERT" Aseba-$BUILD_ID.dmg
rm -f temp.dmg
